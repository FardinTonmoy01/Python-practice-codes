{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPL22btSFbE6sCSKPri+0kl"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M4G9o9EEaaeY","executionInfo":{"status":"ok","timestamp":1701183492144,"user_tz":-360,"elapsed":3246,"user":{"displayName":"Tonmoy Islam","userId":"17925794637999455508"}},"outputId":"ca111b39-e9a9-47e6-8e6e-0e90edd5a30c"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import random\n","from sklearn.preprocessing import MinMaxScaler\n","\n","# Function to generate student data\n","def generate_student_data():\n","    data = []\n","\n","    for _ in range(10000):\n","        student_class = np.random.randint(6, 11)\n","        if student_class >= 9:\n","            student_group = random.choice(['Science', 'Commerce', 'Arts'])\n","        else:\n","            student_group = None\n","\n","        # Generating exam marks and other scores\n","        half_yearly_marks = np.random.randint(0, 101)\n","        yearly_marks = np.random.randint(0, 101)\n","\n","        tutorial_marks = [np.random.randint(0, 26) for _ in range(10)]\n","        assignment_marks = [np.random.randint(0, 16) for _ in range(10)]\n","        viva_marks = [np.random.randint(0, 11) for _ in range(10)]\n","        project_marks = [np.random.randint(0, 11) for _ in range(10)]\n","        fieldwork_marks = [np.random.randint(0, 11) for _ in range(10)]\n","        presentation_marks = [np.random.randint(0, 11) for _ in range(10)]\n","\n","        attendance_marks = np.random.randint(0, 6)\n","        behavior_marks = np.random.randint(0, 6)\n","        discipline_marks = np.random.randint(0, 6)\n","\n","        total_marks = (\n","            half_yearly_marks + yearly_marks + sum(tutorial_marks) +\n","            sum(assignment_marks) + sum(viva_marks) + sum(project_marks) +\n","            sum(fieldwork_marks) + sum(presentation_marks) + attendance_marks +\n","            behavior_marks + discipline_marks\n","        )\n","\n","        data.append([\n","            half_yearly_marks, yearly_marks,\n","            *tutorial_marks, *assignment_marks,\n","            *viva_marks, *project_marks,\n","            *fieldwork_marks, *presentation_marks,\n","            attendance_marks, behavior_marks, discipline_marks,\n","            total_marks\n","        ])\n","\n","    return data\n","\n","# Generate the data\n","columns = [\n","    'Halfyearly_Marks', 'Yearly_Marks',\n","    *[f'Tutorial_{i}_Marks' for i in range(1, 11)],\n","    *[f'Assignment_{i}_Marks' for i in range(1, 11)],\n","    *[f'Viva_{i}_Marks' for i in range(1, 11)],\n","    *[f'Project_{i}_Marks' for i in range(1, 11)],\n","    *[f'Fieldwork_{i}_Marks' for i in range(1, 11)],\n","    *[f'Presentation_{i}_Marks' for i in range(1, 11)],\n","    'Attendance_Marks', 'Behavior_Marks', 'Discipline_Marks', 'Total_Marks'\n","]\n","\n","data = generate_student_data()\n","df = pd.DataFrame(data, columns=columns)\n","\n","# Normalize the numeric attributes using Min-Max scaling\n","scaler = MinMaxScaler()\n","numeric_cols = df.select_dtypes(include=np.number).columns.tolist()\n","df[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n","\n","# Save the modified dataset as ARFF format\n","with open('student_dataset_modified.arff', 'w') as f:\n","    f.write('@relation student_data\\n\\n')\n","    for col in df.columns:\n","        f.write(f\"@attribute '{col}' numeric\\n\")\n","    f.write('\\n@data\\n')\n","    for index, row in df.iterrows():\n","        f.write(','.join(map(str, row.values)) + '\\n')\n","\n","import os\n","print(os.getcwd())\n","\n"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import random\n","from sklearn.preprocessing import MinMaxScaler\n","from google.colab import files\n","\n","# Function to generate student data\n","def generate_student_data():\n","    data = []\n","    for _ in range(10000):\n","        student_class = np.random.randint(6, 11)\n","        if student_class >= 9:\n","            student_group = random.choice(['Science', 'Commerce', 'Arts'])\n","        else:\n","            student_group = None\n","\n","        # Generating exam marks and other scores\n","        half_yearly_marks = np.random.randint(0, 101)\n","        yearly_marks = np.random.randint(0, 101)\n","\n","        tutorial_marks = [np.random.randint(0, 26) for _ in range(10)]\n","        assignment_marks = [np.random.randint(0, 16) for _ in range(10)]\n","        viva_marks = [np.random.randint(0, 11) for _ in range(10)]\n","        project_marks = [np.random.randint(0, 11) for _ in range(10)]\n","        fieldwork_marks = [np.random.randint(0, 11) for _ in range(10)]\n","        presentation_marks = [np.random.randint(0, 11) for _ in range(10)]\n","\n","        attendance_marks = np.random.randint(0, 6)\n","        behavior_marks = np.random.randint(0, 6)\n","        discipline_marks = np.random.randint(0, 6)\n","\n","        data.append([\n","            half_yearly_marks, yearly_marks,\n","            *tutorial_marks, *assignment_marks,\n","            *viva_marks, *project_marks,\n","            *fieldwork_marks, *presentation_marks,\n","            attendance_marks, behavior_marks, discipline_marks\n","        ])\n","\n","    return data\n","\n","# Generate the data\n","columns = [\n","    'Halfyearly_Marks', 'Yearly_Marks',\n","    *[f'Tutorial_{i}_Marks' for i in range(1, 11)],\n","    *[f'Assignment_{i}_Marks' for i in range(1, 11)],\n","    *[f'Viva_{i}_Marks' for i in range(1, 11)],\n","    *[f'Project_{i}_Marks' for i in range(1, 11)],\n","    *[f'Fieldwork_{i}_Marks' for i in range(1, 11)],\n","    *[f'Presentation_{i}_Marks' for i in range(1, 11)],\n","    'Attendance_Marks', 'Behavior_Marks', 'Discipline_Marks'\n","]\n","\n","data = generate_student_data()\n","df = pd.DataFrame(data, columns=columns)\n","\n","# Scale the numeric attributes using Min-Max Scaler\n","scaler = MinMaxScaler()\n","df[columns] = scaler.fit_transform(df[columns])\n","\n","# Save the generated dataset to a CSV file\n","df.to_csv('student_dataset_normalized.csv', index=False)\n","files.download('student_dataset_normalized.csv')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"CwQnWy5xdMR0","executionInfo":{"status":"ok","timestamp":1701185229664,"user_tz":-360,"elapsed":4455,"user":{"displayName":"Tonmoy Islam","userId":"17925794637999455508"}},"outputId":"5277c6a7-d96e-4745-ec90-650e3a4c131e"},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_d247b247-26bb-457c-a37e-884006f6bfbc\", \"student_dataset_normalized.csv\", 5432919)"]},"metadata":{}}]}]}